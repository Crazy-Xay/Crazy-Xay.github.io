{"meta":{"title":"Shelby's Code LearninG","subtitle":"","description":"Shelby's Code LearninG","author":"Shelby","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"快速幂(power)","slug":"2020-12-19-快速幂(power)","date":"2020-12-18T16:00:00.000Z","updated":"2020-12-19T03:02:27.225Z","comments":true,"path":"2020/12/19/2020-12-19-快速幂(power)/","link":"","permalink":"http://example.com/2020/12/19/2020-12-19-%E5%BF%AB%E9%80%9F%E5%B9%82(power)/","excerpt":"编写头文件里的power函数,并优化(快速幂)#include&lt;math.h&gt;头文件里有power函数但是可能没有快速幂快，至于为什么要定义mod=1e9+7然后取余我也没太清楚，可能是数据结构？","text":"编写头文件里的power函数,并优化(快速幂)#include&lt;math.h&gt;头文件里有power函数但是可能没有快速幂快，至于为什么要定义mod=1e9+7然后取余我也没太清楚，可能是数据结构？ 1.最开始学C的时候写的平方求法(数据小的时候可以进行,数据大了时间会超时)1234567891011#include&lt;stdio.h&gt;int main()&#123; int a,b,sum=1; scanf(&quot;%d%d&quot;,&amp;a,&amp;b); for(int i=1;i&lt;=b;i++) sum*=a; printf(&quot;%d\\n&quot;,sum); return 0;&#125; 2.快速幂(power)1234567891011121314151617181920212223#include&lt;stdio.h&gt;typedef long long ll;const ll mod=1e9+7;ll power(ll g,ll n)&#123; ll ans=1; while(n) //n是g的次方数 &#123; if(n&amp;1) ans=ans*g%mod; g=g*g%mod; n&gt;&gt;=1; //运用位运算将n缩小两倍 &#125; return ans;&#125;int main()&#123; ll n,g; scanf(&quot;%lld%lld&quot;,&amp;g,&amp;n); printf(&quot;%lld\\n&quot;,power(g,n)); return 0;&#125;","categories":[],"tags":[{"name":"-Programming-ACS","slug":"Programming-ACS","permalink":"http://example.com/tags/Programming-ACS/"}]},{"title":"Python初体验","slug":"2020-12-17-Python初体验","date":"2020-12-16T16:00:00.000Z","updated":"2020-12-17T12:55:20.182Z","comments":true,"path":"2020/12/17/2020-12-17-Python初体验/","link":"","permalink":"http://example.com/2020/12/17/2020-12-17-Python%E5%88%9D%E4%BD%93%E9%AA%8C/","excerpt":"","text":"感觉python比其他语言真的简单好多(此处简单是容易写的意思)我也自己误打误撞先写了几个python代码1.百钱买百鸡123456for i in range(1, 20): for j in range(1, 33): for q in range(1, 35): if i*5+j*3+q == 100: if i+j+q*3 == 100: print(i, j, q*3) //这里pycharm两个警告我还看不懂等以后再来修改 2.求阶乘(数值范围很大)12345a=int(input())fa=1for i in range (1, a+1): fa*=i print(fa)","categories":[],"tags":[{"name":"-Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"指针编写函数invstr--字符串逆序存放输出","slug":"2020-12-17-指针编写字符串逆序存放输出","date":"2020-12-16T16:00:00.000Z","updated":"2020-12-17T08:23:19.579Z","comments":true,"path":"2020/12/17/2020-12-17-指针编写字符串逆序存放输出/","link":"","permalink":"http://example.com/2020/12/17/2020-12-17-%E6%8C%87%E9%92%88%E7%BC%96%E5%86%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%86%E5%BA%8F%E5%AD%98%E6%94%BE%E8%BE%93%E5%87%BA/","excerpt":"","text":"12345678910111213141516171819202122#include&lt;stdio.h&gt;#include&lt;string.h&gt; //引入库函数void invstr(char *s) //定义倒序存放的函数&#123; char *p,t; int i,len=strlen(s); for(i=0,p=s;i&lt;len/2;i++) &#123; t=*(p+i); *(p+i)=*(p+len-i-1); //将数组的前一半与后一半对换 *(p+len-i-1)=t; &#125;&#125;int main()&#123; char a[10000]; gets(a); invstr(a); printf(&quot;%s&quot;,a); //输出倒序后的数组 return 0;&#125; 这是我用指针写的第一个函数,Keep Fighting.","categories":[],"tags":[{"name":"Programming-ACS","slug":"Programming-ACS","permalink":"http://example.com/tags/Programming-ACS/"}]},{"title":"汇编语言","slug":"2020-12-17-汇编语言","date":"2020-12-16T16:00:00.000Z","updated":"2020-12-17T15:05:54.155Z","comments":true,"path":"2020/12/17/2020-12-17-汇编语言/","link":"","permalink":"http://example.com/2020/12/17/2020-12-17-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/","excerpt":"","text":"12345678910111213assume cs:codesg &#x2F;&#x2F;伪指令codesg segmentmov ax,0123hmov bx,0456hadd ax,bx &#x2F;&#x2F;现在还只能写出十六进制的加法add ax,axmov ax,4c00hint 21hcodesg endsend 2020-12-17汇编语言loop 寄存器地址设置寒假再看","categories":[],"tags":[{"name":"-Assembly language","slug":"Assembly-language","permalink":"http://example.com/tags/Assembly-language/"}]},{"title":"排序算法合集","slug":"2020-12-17-排序算法合集","date":"2020-12-16T16:00:00.000Z","updated":"2020-12-18T10:09:09.140Z","comments":true,"path":"2020/12/17/2020-12-17-排序算法合集/","link":"","permalink":"http://example.com/2020/12/17/2020-12-17-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%90%88%E9%9B%86/","excerpt":"1.冒泡排序(BubbleSort)1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;void swap(int *a,int *b)&#123; int temp; temp=*a; *a=*b; //编写交换值函数swap *b=temp;&#125;void BubbleSort(int a[],int n)&#123; for(int i=0;i&lt;n;i++) scanf(&quot;%d&quot;,a+i); for(int i=0;i&lt;n-1;i++) //冒泡排序主题 for(int j=i+1;j&lt;n;j++) if(a[i]&gt;a[j]) swap(&amp;a[i],&amp;a[j]);&#125;int main()&#123; int n; scanf(&quot;%d&quot;,&amp;n); int a[n]; BubbleSort(a,n); for(int i=0;i&lt;n;i++) printf(&quot;%d &quot;,a[i]); return 0;&#125;","text":"1.冒泡排序(BubbleSort)1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;void swap(int *a,int *b)&#123; int temp; temp=*a; *a=*b; //编写交换值函数swap *b=temp;&#125;void BubbleSort(int a[],int n)&#123; for(int i=0;i&lt;n;i++) scanf(&quot;%d&quot;,a+i); for(int i=0;i&lt;n-1;i++) //冒泡排序主题 for(int j=i+1;j&lt;n;j++) if(a[i]&gt;a[j]) swap(&amp;a[i],&amp;a[j]);&#125;int main()&#123; int n; scanf(&quot;%d&quot;,&amp;n); int a[n]; BubbleSort(a,n); for(int i=0;i&lt;n;i++) printf(&quot;%d &quot;,a[i]); return 0;&#125; 2.选择排序(SelectSort)123456789101112131415161718192021222324252627282930313233#include&lt;stdio.h&gt;void swap(int *a,int *b)&#123; int temp; temp=*a; *a=*b; //编写交换值函数swap *b=temp;&#125;void SelectSort(int a[],int n)&#123; for(int i=0;i&lt;n;i++) &#123; int minIndex=i; for(int j=i+1;j&lt;n;j++) &#123; if(a[j]&lt;a[minIndex]) minIndex=j; swap(&amp;a[i],&amp;a[minIndex]); &#125; &#125;&#125;int main()&#123; int a[10000],n; scanf(&quot;%d&quot;,&amp;n); for(int i=0;i&lt;n;i++) scanf(&quot;%d&quot;,a+i); SelectSort(a,n); for(int i=0;i&lt;n;i++) printf(&quot;%d &quot;,a[i]); return 0;&#125; 3.插入排序(InsertSort)12345678910111213141516171819202122232425262728293031#include&lt;stdio.h&gt;void swap(int *a,int *b)&#123; int temp; //定义中间变量 temp=*a; *a=*b; *b=temp;&#125;void InsertSort(int a[],int n)&#123; int i,j,temp; for(i=1;i&lt;n;i++) &#123; temp=a[i]; for(j=i-1;j&gt;=0&amp;&amp;a[j]&gt;temp;j--) //如果条件成立就将数组前移 a[j+1]=a[j]; a[j+1]=temp; //条件不成立or循环结束将temp值放在j+1处 &#125;&#125;int main()&#123; int a[10000],n; scanf(&quot;%d&quot;,&amp;n); for(int i=0;i&lt;n;i++) scanf(&quot;%d&quot;,a+i); InsertSort(a,n); for(int i=0;i&lt;n;i++) printf(&quot;%d &quot;,a[i]); return 0;&#125; 4.快速排序(QuickSort)1234567891011121314151617181920212223242526272829303132333435363738#include&lt;stdio.h&gt;void swap(int *a,int *b)&#123; int temp; //定义中间变量 temp=*a; *a=*b; *b=temp;&#125;void QuickSort(int a[],int left,int right)&#123; if(left&gt;=right) return; int k=a[left]; //排序从左边开始比较 int i=left,j=right; while(i!=j) &#123; while(j&gt;i&amp;&amp;a[j]&gt;=k) j--; swap(&amp;a[i],&amp;a[j]); while(i&lt;j&amp;&amp;a[i]&lt;=k) i++; swap(&amp;a[i],&amp;a[j]); &#125; QuickSort(a,left,i-1); QuickSort(a,i+1,right);&#125;int main()&#123; int a[10000],n; scanf(&quot;%d&quot;,&amp;n); for(int i=0;i&lt;n;i++) scanf(&quot;%d&quot;,a+i); QuickSort(a,0,n-1); for(int i=0;i&lt;n;i++) printf(&quot;%d &quot;,a[i]); return 0;&#125; 5.归并排序(MergeSort)12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;stdio.h&gt;int a[10000],b[10000];void swap(int *a,int *b)&#123; int temp; temp=*a; *a=*b; *b=temp;&#125;void Merge(int a[],int left,int mid,int right,int tmp[])&#123; int pb=0,p1=left,p2=mid+1; while(p1&lt;=mid&amp;&amp;p2&lt;=right) &#123; if(a[p1]&lt;a[p2]) tmp[pb++]=a[p1++]; //归并排序的主体部分,将二分部分进行排序 else tmp[pb++]=a[p2++]; &#125; while(p1&lt;=mid) tmp[pb++]=a[p1++]; while(p2&lt;=right) tmp[pb++]=a[p2++]; for(int i=0;i&lt;right-left+1;i++) a[left+i]=tmp[i]; //a数组下标从left+i开始&#125;void MergeSort(int a[],int left,int right,int tmp[])&#123; if(right&gt;left) //二分数组进行排序 &#123; int mid=left+(right-left)/2; MergeSort(a,left,mid,tmp); MergeSort(a,mid+1,right,tmp); Merge(a,left,mid,right,tmp); &#125;&#125;int main()&#123; int n; scanf(&quot;%d&quot;,&amp;n); for(int i=0;i&lt;n;i++) scanf(&quot;%d&quot;,a+i); MergeSort(a,0,n-1,b); for(int i=0;i&lt;n;i++) printf(&quot;%d &quot;,a[i]); return 0;&#125;","categories":[],"tags":[{"name":"Programming-ACS","slug":"Programming-ACS","permalink":"http://example.com/tags/Programming-ACS/"}]},{"title":"WangJp_'s Somethings","slug":"Shelby","date":"2020-12-16T16:00:00.000Z","updated":"2020-12-17T11:24:18.606Z","comments":true,"path":"2020/12/17/Shelby/","link":"","permalink":"http://example.com/2020/12/17/Shelby/","excerpt":"This is my Qzone.This is my CSDN.","text":"This is my Qzone.This is my CSDN. He is my idol Alan Mathison Turing.123456#include&lt;stdio.h&gt;int main()&#123; printf(&quot;Welcome To My Github Blog\\n&quot;); return 0;&#125;","categories":[],"tags":[{"name":"Welcome Everybody","slug":"Welcome-Everybody","permalink":"http://example.com/tags/Welcome-Everybody/"}]},{"title":"Welcome To Shelby_WangJp's Github blog World!!!","slug":"hello-world","date":"2020-12-16T16:00:00.000Z","updated":"2020-12-19T14:39:06.407Z","comments":true,"path":"2020/12/17/hello-world/","link":"","permalink":"http://example.com/2020/12/17/hello-world/","excerpt":"Quick View","text":"Quick View My QQ number : 1215627501My Email address : &#x31;&#50;&#x31;&#53;&#54;&#50;&#55;&#53;&#48;&#x31;&#64;&#113;&#113;&#46;&#99;&#111;&#109;My Wechat name : MarshmelloJpIf you have any questions, you can contact me in the above ways.","categories":[],"tags":[{"name":"Daily Life","slug":"Daily-Life","permalink":"http://example.com/tags/Daily-Life/"}]}],"categories":[],"tags":[{"name":"-Programming-ACS","slug":"Programming-ACS","permalink":"http://example.com/tags/Programming-ACS/"},{"name":"-Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"Programming-ACS","slug":"Programming-ACS","permalink":"http://example.com/tags/Programming-ACS/"},{"name":"-Assembly language","slug":"Assembly-language","permalink":"http://example.com/tags/Assembly-language/"},{"name":"Welcome Everybody","slug":"Welcome-Everybody","permalink":"http://example.com/tags/Welcome-Everybody/"},{"name":"Daily Life","slug":"Daily-Life","permalink":"http://example.com/tags/Daily-Life/"}]}